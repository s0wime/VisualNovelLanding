generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Visitor {
  id String @db.Uuid @id
  firstSeenAt DateTime @default(now())
  lastSeenAt DateTime @default(now())
  email String?
  sessions Session[]
  events Event[]
  quizAttempts QuizAttempt[]
}

model Session {
  id Int @id @default(autoincrement())
  visitor Visitor @relation(fields: [visitorId], references: [id])
  visitorId String @db.Uuid
  sessionStart DateTime @default(now())
  sessionEnd DateTime?
  duration Int?
  lastActivityAt DateTime @default(now())
  ipAddress String?
  uaDevice String?
  uaOs String?
  uaBrowser String?
  referrer String?
  age String?
  gender String?
  events Event[]
  quizAttempts QuizAttempt[]
}

model Event {
  id Int @id @default(autoincrement())
  session Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  visitor Visitor @relation(fields: [visitorId], references: [id])
  visitorId String @db.Uuid
  eventType EventType
  timestamp DateTime @default(now())
}

model Question {
  id Int @id @default(autoincrement())
  genre GenreType
  text String
  order Int
  answers Answer[]
  quizResponses QuizResponse[]
}

model Answer {
  id Int @id @default(autoincrement())
  question Question @relation(fields: [questionId], references: [id])
  questionId Int
  option String
  text String
  quizResponses QuizResponse[]
}

model QuizAttempt {
  id Int @id @default(autoincrement())
  session Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  visitor Visitor @relation(fields: [visitorId], references: [id])
  visitorId String @db.Uuid
  startedAt DateTime @default(now())
  completedAt DateTime?
  duration Int?
  quizType GenreType?
  isCompleted Boolean @default(false)
  quizResponses QuizResponse[]
}

model QuizResponse {
  id Int @id @default(autoincrement())
  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  quizAttemptId Int
  question Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer Answer @relation(fields: [answerId], references: [id])
  answerId Int
  answeredAt DateTime @default(now())
}

model Story {
  id Int @id @default(autoincrement())
  option String
  title String
  text String
  genre GenreType
}

enum GenreType {
  FUTURISTIC
  FANTASY
  MODERN
}

enum EventType {
  CLICK_TRY_FREE
  CLICK_TRY_PAID
  QUIZ_STARTED
  QUIZ_ENDED
  EMAIL_SUBMITTED
}
